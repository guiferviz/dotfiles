
global !p
LOREM = """
Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod \
tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At \
vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, \
no sea takimata sanctus est Lorem ipsum dolor sit amet.
"""
def make_box(twidth, bwidth=None):
    b, m, e, i = (s.strip() for s in get_comment_format())
    bwidth_inner = bwidth - 3 - max(len(b), len(i + e)) if bwidth else twidth + 2
    sline = b + m + bwidth_inner * m[0] + 2 * m[0]
    nspaces = (bwidth_inner - twidth) // 2
    mlines = i + m + " " + " " * nspaces
    mlinee = " " + " "*(bwidth_inner - twidth - nspaces) + m
    eline = i + m + bwidth_inner * m[0] + 2 * m[0] + e
    return sline, mlines, mlinee, eline
def foldmarker():
    "Return a tuple of (open fold marker, close fold marker)"
    return vim.eval("&foldmarker").split(",")
def get_comment_format():
    """ Returns a 4-element tuple (first_line, middle_lines, end_line, indent)
    representing the comment format for the current file.
    It first looks at the 'commentstring', if that ends with %s, it uses that.
    Otherwise it parses '&comments' and prefers single character comment
    markers if there are any.
    """
    commentstring = vim.eval("&commentstring")
    if commentstring.endswith("%s"):
        c = commentstring[:-2]
        return (c.rstrip(), c.rstrip(), c.rstrip(), "")
    comments = _parse_comments(vim.eval("&comments"))
    for c in comments:
        if c[0] == "SINGLE_CHAR":
            return c[1:]
    return comments[0][1:]
def _parse_comments(s):
    """ Parses vim's comments option to extract comment format """
    i = iter(s.split(","))

    rv = []
    try:
        while True:
            # get the flags and text of a comment part
            flags, text = next(i).split(':', 1)

            if len(flags) == 0:
                rv.append(('OTHER', text, text, text, ""))
            # parse 3-part comment, but ignore those with O flag
            elif 's' in flags and 'O' not in flags:
                ctriple = ["TRIPLE"]
                indent = ""

                if flags[-1] in string.digits:
                    indent = " " * int(flags[-1])
                ctriple.append(text)

                flags, text = next(i).split(':', 1)
                assert flags[0] == 'm'
                ctriple.append(text)

                flags, text = next(i).split(':', 1)
                assert flags[0] == 'e'
                ctriple.append(text)
                ctriple.append(indent)

                rv.append(ctriple)
            elif 'b' in flags:
                if len(text) == 1:
                    rv.insert(0, ("SINGLE_CHAR", text, text, text, ""))
    except StopIteration:
        return rv

from guiferviz_vim_helpers import get_uuid
endglobal


snippet uuid "Random UUID" w
`!p
if not snip.c:
	snip.rv = get_uuid()`
endsnippet

snippet box "A nice box with the current comment symbol" b
`!p
box = make_box(len(t[1]))
snip.rv = box[0]
snip += box[1]
`${1:${VISUAL:content}}`!p
box = make_box(len(t[1]))
snip.rv = box[2]
snip += box[3]`
$0
endsnippet

snippet today "Print today's date" w
`date +%d-%m-%Y`
endsnippet

snippet slug "replace specials with underscores" w
${1:${VISUAL/[^0-9a-zA-Z]/_/g}}
endsnippet

snippet slug_no_rep "replace specials with underscores" w
`!p
import re
out = re.sub("[^0-9a-zA-Z]", "_", snip.v.text)
out = re.sub("_+", "_", out)
snip.rv = out
`
endsnippet

snippet list_of_strings "transform each line in a list element using quotes and commas" w
`!p
out = snip.v.text
out = out.split("\n")
out = "".join([f'"{i}",\n' for i in out if i != ""])
out = f"[\n{out}]"
snip.rv = out
`
endsnippet

snippet dict_from_lines "splits all words and use them as pair key values of a dict" w
`!p
import re
out = snip.v.text
out = re.split("\s", out)
out = [i for i in out if i != ""]
if len(out) % 2 == 0:
	out = "".join([f'"{k}": "{v}",\n' for k, v in zip(out[::2], out[1::2])])
	out = f"{{\n{out}}}"
else:
	out = "ERROR: an even number of words are needed for creating a dictionary"
snip.rv = out
`
endsnippet

snippet eval "evaluate Python expression and return resuts" w
`!p
out = eval(snip.v.text)
snip.rv = out
`
endsnippet
